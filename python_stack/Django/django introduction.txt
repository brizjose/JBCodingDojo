Django is modular, uses M V C architecture:  Model Controller View
Modularization = digestable pieces, code becomes a well organized collection of modules

In Django, they named the architectural pieces differently, so naming convention not as the traditional:
Django is a Model Template View architecture

-Model called Model;
-Controller called Views;  views.py is the controller
-Views called Templates;  urls, html

Django is an MVC of MVC's.  It can have multiple projects inside.

Apps are smaller chunks with models, views and templates, and the goal is for the apps to be self sustaining

Steps:
1. First we create a project folder  --  has the project settings and carries the name of the project
2. Sub applications folder -- example, a) login_registration, b) wall
3. Sub application has own mtv architecture --
	- urls.py is router, 
	- views.py is controller, 
	- models.py 
	- templates folder

Folders:
-Project_folder
	-Settings and misc
	-urls.py
		-compiled urls from apps folders
	-Apps_folder
		-App1_folder
			-urls.py
			-view.py
			-models.py
			-templates_folder

Projects:

1.
To create a Django project, enter the following in the terminal:

PS C:\Users\Jose Briz\Desktop\CodingDojo\codes\JBCodingDojo> django-admin startproject django1

and the django1 folder will be created like so:

-django1
	-django1
		-__init__.py 
		-settings.py
		-ursl.py
		-wsgi.py
	-manage.py

2.
then, need to create the apps folder:

PS C:\Users\Jose Briz\Desktop\CodingDojo\codes\JBCodingDojo\django1> mkdir apps

3.
inside the apps folder, create an __init__.py file that will let you import the whole folder as a package; tells python the folder is a package.

4.
to create an app called 'login_reg', execute the manage.py file like this:

PS C:\Users\Jose Briz\Desktop\CodingDojo\codes\JBCodingDojo\django1\apps> python ../manage.py startapp login_reg

use the ../ because the file is one level above; or the django-admin already knows where to create it so can simply type:

PS C:\Users\Jose Briz\Desktop\CodingDojo\codes\JBCodingDojo\django1\apps> django-admin startapp login_reg

a login_reg folder will be created with needed files to get started

5.
NOTE:  still need to create 'templates' folder and 'urls.py' file inside the app folder.

6.
inside the 'templates' folder, make another folder again called 'login_reg'
so that when the manager grabs the templates folder, it knows which app it belongs to.  in this case, the 'login_reg' app

7.
go in the 'settings.py' file found in the django1 project folder, and to the list of INSTALLED_APS = [] add the app that is being created

INSTALLED_APPS = [
	'django.a;sdlkjfdk',
	'django.etcetcetc',
	'apps.login_reg 
]

8.
in the 'urls.py' file found in the django1 project folder, include it in the urlpatterns = {}

urlpatterns = [
	url(r'^admi......),
	url(r'^', include('apps.login_reg.urls'))
]

9.
in the 'urls.py' file also import 'include'; this is found above urlpatterns=[] 

from django.conf.urls import url, include

10.
from this 'urls.py' file, copy the import and urlpattern list in the 'urls.py' file in the app folder because that is the syntax you want to follow,
but not the admin part of it...  remember this is the router
modify the url pattern as needed.  
Application url's need to end in a dollar sign

from django.conf.urls import url
import views

urlpatterns = [
    url(r'^$', views.index)
]

11.  then go to the 'views.py' file to create the required views:
use the request object to define the routes
these are all the functions pointed at by the routes in the urls.py files  (like in flask there were @route's to functions)

def index(request):
    return render(request, "login_reg/index.html")

1**.
to run the application, execute the manage.py file on the root level of the application

PS C:\Users\Jose Briz\Desktop\CodingDojo\codes\JBCodingDojo\django1> python manage.py runserver









  