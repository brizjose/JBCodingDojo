1. select records

SELECT <column> FROM <table>
WHERE <condition>

2. insert record

INSERT INTO <table> (column_1, column_2, column_3, column_4)
VALUES ('value_1', 'value_2', 'value_3', 'value-4');


3. update

UPDATE <table> SET <column_1> = <value>, <column_2> = <value> WHERE <condition>;

4. delete

DELETE FROM <table> WHERE <condition>;

5. if delete does not run, write the following command to let SQL know you know what you are doing;

SET SQL_SAFE_UPDATES = 0;

6. functions

do not memorize functions, look them up as needed, good resource is W3Schools.

syntax:

SELECT function() FROM <table>;

7. join - joins tables by foreign id

SELECT <table_a>.<column_1>, <table_a>.<column_2>, <table_b>.<column_1>, <table_b>.<column_2>
FROM <table_a>
JOIN <table_b> ON <table_a>.<id> = <table_b>.<foreign_id>;

8. join multiple tables

SELECT <table_a>.<column_1>, <table_b>.<column_1>, <table_c>.<column_1>
FROM <table_a>
JOIN <table_b> ON <table_a>.<id> = <table_b>.<table_a_foreign_id>
JOIN <table_c> ON <table_b>.<id> = <table_c>.<table_b_foreign_id>

9. self-join using AS  -- select users following user with id = 1:

SELECT users.last_name AS followed, users2.last_name AS follower 

FROM users

LEFT JOIN follows ON users.id = follows.followed_id

LEFT JOIN users AS users2 ON users2.id = follows.follower_id

WHERE users.id = 1;

10. nested queries -- select users not following user.id = 2

SELECT *

FROM users

WHERE users.id NOT IN (
	
  SELECT follower_id
    
  FROM follows
     
  WHERE followed_id = 2)

AND users.id != 2;  

11. queries with functions and grouping -- count number of users following user.id = 1

SELECT users.last_name AS user, COUNT(users2.last_name) AS follower_count

FROM users

LEFT JOIN follows ON users.id = follows.followed_id

LEFT JOIN users AS users2 ON users2.id = follows.follower_id

WHERE users.id = 1

GROUP BY users.id

12. left join - will display all records on left table (table_a) even if there is no corresponding record on table_b. 
table_b columns will show up as null for those that are empty

SELECT <table_a>.<column_1>, <table_a>.<column_2>, <table_b>.<column_1>, <table_b>.<column_2>
FROM <table_a>  --->becomes left table by default and <table_b> becomes right table
LEFT JOIN <table_b> ON <table_a>.<id> = <table_b>.<foreign_id>;

13. right join - will display all records on right table (table_b) even if there is no corresponding record on table_a. 
table_a columns will show up as null for those that are empty

SELECT <table_a>.<column_1>, <table_a>.<column_2>, <table_b>.<column_1>, <table_b>.<column_2>
FROM <table_a>  --->becomes left table by default and <table_b> becomes right table
RIGHT JOIN <table_b> ON <table_a>.<id> = <table_b>.<foreign_id>;

14. group and sum or perform math operation with numerical column

SELECT <table_a>.<column_1>, <table_a>.<column_2>, SUM(<table_b>.<column_x>)
FROM <table_a>
JOIN <table_b> ON <table_a>.<id> = <table_b>.<table_a_foreign_id>
GROUP BY <table_a>.<id>;

15. concatenate a column to show list of strings

SELECT GROUP_CONCAT(' ',<table_b>.<column_x>), <table_a>.<column_1>, <table_a>.<column_2> 
FROM <table_a>
JOIN <table_b> ON <table_a>.<id> = <table_b>.<table_a_foreign_id>
GROUP BY <table_a>.<id>;

16. count instances of something in a table --> count number of rows for a particular group

SELECT COUNT(<table_b>.<id>), <table_a>.<column_x>
FROM <table_a>
JOIN <table_b> ON <table_a>.<id> = <table_b>.<table_a_foreign_id>
GROUP BY <table_a>.<id>;

