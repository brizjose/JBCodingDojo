OOP - Object Oriented Programming

Create blueprints for the elements, each with things they have and things they do...

Objects organize different functionalities.  Dicts and lists are examples of very important objects in Python.

Key concepts:
-Class -- a type or blueprint of an object indicating how it will interact, the commonality, a repeatable object 

	class Vehicle(object):
		pass

-Instance -- a copy of a class; can be exact but it's a different entity, with own address in memory

	my_vehicle = Vehicle()

-Encapsulation -- create functionality inside every object you create (methods), a functionality every member of the type should be able to do;
what properties it should have go in the __init__ method

	class Vehicle(object):
		def __init__(self, color, miles=0):
			self.color = color
			self.miles = miles   -- default has been set to 0, so no need to pass it as argument if default value is fine

	-self refers to the instance that is being created 	

	my_vehicle = Vehicle("black")

you can access attributes of an instance using dot notation
	
	print my_vehicle.miles

-Inheritance -- a class is a very basic structure.  we can create children or sub-classes based on a class, with added functionalities

	class Bicycle(Vehicle):
		pass

	class Car(Vehicle):
		pass

-super -- can access the parent __init__ method to make some own setup in the sub-class

	class Bicycle(Vehicle):	
		def __init__(self, color, wheel_size, miles=0):
			super(Bicycle, self).__init__(color, miles)     --calls parent method
			self.wheel_size = wheel_size			--adds attributes

-Chaining -- method calls can be chained with dot notation.  Because the method points to the instance, we need to return such instance after 
a method is called so that chaining can take place
	
	class Bicycle(Vehicle):
		def__init__(self, color, wheel_size, miles=0):
			super(Bicycle, self).__init__(color, miles)
			self.wheel_size = wheel_size
		def drive(self, miles):
			self.miles += miles
			return self			---this one

my_bike - Bicycle("silver", 24)
my_bike.drive(50).drive(100)	 

-print -- printing an object returns it's address in memory.  If we want to see an object printed as a dictionary, we use:

	print my_bike.__dict__

we can use dot notation to print an object's specific attribute:

	print my_bike.miles


Review:

Each blueprint is a CLASS
what they have is called ATTRIBUTES
what they can do is called METHODS

Each object created using the blueprint is called an INSTANCE

each INSTANCE = OBJECT
with INSTANCE ATTRIBUTES and INSTANCE METHODS

METHODS and ATTRIBUTES can be PRIVATE, and they become unavailable to the INSTANCES
only available if they are PUBLIC

CONSTRUCTOR is a method that creates OBJECTs
DESTRUCTUOR is a method that is run when an OBJECT is erased from memory

OBJECTs can generate other versions of itself or upgrade with additional attributes and methods from the base OBJECT
with upgraded objects, the CLASS can INHERIT all PUBLIC attributes from the parent, plus have their own. 
apart from PUBLIC and PRIVATE methods, there are PROTECTED methods that do get inherited but remain hidden from public

OOP (Object Oriented Programming) is something that has revolutionized the way programming is done today. 
If used correctly, it can save you loads of time. 
It will also help you to avoid repeating code that solves the same simple problem, making code maintenance easy. 

Understanding object-oriented programming principles is the key to making your code more organized and modular.

OOP is used in web development as a way of producing many copies of similar objects.